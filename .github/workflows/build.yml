name: Build Workflow
permissions:
  contents: write
on:
  pull_request:
    paths:
      - pyird.py
  push:
    branches:
      - main
    paths:
      - pyird.py

jobs:
  build_matrix:
    strategy:
      matrix:
        os: [windows-latest, macos-13, macos-14, ubuntu-latest]
    
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Python (MacOS x64)
        if: ${{ matrix.os == 'macos-13' }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python (MacOS ARM)
        if: ${{ matrix.os == 'macos-14' }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python (Windows)      
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
          architecture: 'x64'

      - name: Install Python (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
          architecture: 'x64'

      - name: Install Requirements (MacOS x64)
        if: ${{ matrix.os == 'macos-13' }}
        run: |
          pip3 install -r requirements.txt

      - name: Install Requirements (MacOS ARM)
        if: ${{ matrix.os == 'macos-14' }}
        run: |
          pip3 install -r requirements.txt

      - name: Install Requirements (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          pip install -r requirements.txt

      - name: Install Requirements (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          pip install -r requirements.txt

      - name: Build Executable (MacOS x64)
        if: ${{ matrix.os == 'macos-13' }}
        run: |
          pyinstaller pyird.py --noconfirm --noconsole --onefile
          mkdir macos
          cp dist/pyird macos
          (cd macos/ && zip -r -X ../pyird_MacOS_x64.zip .)

      - name: Build Executable (MacOS ARM)
        if: ${{ matrix.os == 'macos-14' }}
        run: |
          pyinstaller pyird.py --noconfirm --noconsole --onefile
          mkdir macos-arm
          cp dist/pyird macos-arm
          (cd macos-arm/ && zip -r -X ../pyird_MacOS_arm64.zip .)

      - name: Build Executable (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          pyinstaller pyird.py --noconfirm --noconsole --onefile
          mkdir windows
          cp dist/pyird.exe windows
          Compress-Archive -Path "windows/*" -DestinationPath pyird_Windows.zip

      - name: Build Executable (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          pyinstaller pyird.py --noconfirm --noconsole --onefile
          mkdir linux
          cp dist/pyird linux
          (cd linux/ && zip -r -X ../pyird_Linux.zip .)

      - name: Upload Artifact (MacOS x64)
        if: ${{ matrix.os == 'macos-13' }}
        uses: actions/upload-artifact@v4
        with:
          name: pyird_MacOS_x64.zip
          path: pyird_MacOS_x64.zip

      - name: Upload Artifact (MacOS ARM)
        if: ${{ matrix.os == 'macos-14' }}
        uses: actions/upload-artifact@v4
        with:
          name: pyird_MacOS_arm64.zip
          path: pyird_MacOS_arm64.zip

      - name: Upload Artifact (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: pyird_Windows.zip
          path: pyird_Windows.zip

      - name: Upload Artifact (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: pyird_Linux.zip
          path: pyird_Linux.zip

  create_release:
    needs: build_matrix
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Get Next Version
        id: version
        run: |
          git fetch --tags

          latest_tag=$(git describe --tags --abbrev=0 || echo "v1.0.0")
          echo "Latest tag: $latest_tag"

          version="${latest_tag#v}"
          IFS='.' read -r major minor patch <<< "$version"
          patch=$((patch + 1))
          new_tag="v$major.$minor.$patch"

          echo "Next version: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_ENV
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Download Artifacts (MacOS x64)
        uses: actions/download-artifact@v4
        with:
          name: pyird_MacOS_x64.zip
          path: ./artifacts

      - name: Download Artifacts (MacOS ARM)
        uses: actions/download-artifact@v4
        with:
          name: pyird_MacOS_arm64.zip
          path: ./artifacts

      - name: Download Artifacts (Windows)
        uses: actions/download-artifact@v4
        with:
          name: pyird_Windows.zip
          path: ./artifacts

      - name: Download Artifacts (Linux)
        uses: actions/download-artifact@v4
        with:
          name: pyird_Linux.zip
          path: ./artifacts

      - name: Generate Changelog
        id: changelog
        run: |
          changelog=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"- %an: %s")
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.new_tag }}
          release_name: ${{ steps.version.outputs.new_tag }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/pyird_Windows.zip
          asset_name: pyird_Windows.zip
          asset_content_type: application/zip

      - name: Upload Release Asset (MacOS x64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/pyird_MacOS_x64.zip
          asset_name: pyird_MacOS_x64.zip
          asset_content_type: application/zip

      - name: Upload Release Asset (MacOS ARM)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/pyird_MacOS_arm64.zip
          asset_name: pyird_MacOS_arm64.zip
          asset_content_type: application/zip

      - name: Upload Release Asset (Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/pyird_Linux.zip
          asset_name: pyird_Linux.zip
          asset_content_type: application/zip